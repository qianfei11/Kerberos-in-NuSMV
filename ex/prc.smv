MODULE prc(other-st, turn, myturn)
VAR
	st : {n, t, c};
ASSIGN
	init(st) := n;
	next(st) := case
		st = n : {t, n};
		st = t & other-st = n : c;
		st = t & other-st = t & turn = myturn : c;
		st = c : {c, n};
		TRUE : st;
	esac;
	next(turn) := case
		turn = myturn & st = c : !turn;
		TRUE : turn;
	esac;
FAIRNESS running
FAIRNESS !(st = c)

MODULE main
VAR
	pr1 : process prc(pr2.st, turn, FALSE);
	pr2 : process prc(pr1.st, turn, TRUE);
	turn : boolean;
ASSIGN
	init(turn) := FALSE;
-- safety
SPEC AG !(pr1.st = c & pr2.st = c)
-- liveness
SPEC AG (pr1.st = t -> AF pr2.st = c)
SPEC AG (pr2.st = t -> AF pr1.st = c)
